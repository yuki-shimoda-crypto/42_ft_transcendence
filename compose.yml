---
networks:
  monitoring:
    driver: bridge

volumes:
  postgres_data: {}
  node_volume: {}
  redis_data: {}
  prometheus_data: {}
  grafana-data: {}

services:
  db:
    build:
      context: .
      dockerfile: Dockerfile.db
    restart: always
    shm_size: 256mb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-db}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
      POSTGRES_PORT: ${DATABASE_PORT:-5432}
      POSTGRES_USER: ${DATABASE_USER:-user}
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-user} -d ${DATABASE_NAME:-db} -p ${DATABASE_PORT:-5432}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monitoring

  web-prod:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - monitoring

  web-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app
      - node_volume:/app/node_modules
    restart: always
    ports:
      - "8001:8000"
    depends_on:
      - db
      - redis
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - monitoring

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring
